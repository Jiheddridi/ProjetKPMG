# from langchain.llms import Ollama  # Comment√© pour √©viter les erreurs d'import
try:
    import fitz  # PyMuPDF
    FITZ_AVAILABLE = True
except ImportError:
    FITZ_AVAILABLE = False
    print("‚ö†Ô∏è PyMuPDF non disponible - fonctionnalit√© PDF limit√©e")

import pandas as pd
import re
import json
from datetime import datetime
from typing import Dict, List, Tuple
import nltk
from collections import Counter
from cobit_config import OBJECTIFS_COBIT_2019, NIVEAUX_MATURITE, DOMAINES_FOCUS, INDICATEURS_PERFORMANCE

# T√©l√©charger les ressources NLTK n√©cessaires (√† faire une seule fois)
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize

llm = Ollama(model="cobit-auditeur")  # Comment√© temporairement

class MockLLM:
    """Mock LLM pour les tests sans Ollama/Langchain."""
    def __call__(self, prompt):
        return self.generer_rapport_mock(prompt)

    def generer_rapport_mock(self, prompt):
        """G√©n√®re un rapport mock pour les tests."""
        return """
üè¢ **RAPPORT D'AUDIT GOUVERNANCE IT - COBIT 2019**
üìÖ Date du rapport: G√©n√©r√© automatiquement

## 1. üìã SYNTH√àSE EX√âCUTIVE
- Score de maturit√© global estim√©: 2.5/5 (Niveau "R√©p√©table mais intuitif")
- Principaux enjeux: Am√©lioration des processus de gouvernance IT n√©cessaire
- Priorit√©s d'action: Mise en place de processus structur√©s

## 2. üéØ ANALYSE DES BESOINS CLIENT
- Besoins m√©tier identifi√©s: Am√©lioration de la gouvernance IT
- D√©fis technologiques: Standardisation des processus
- Objectifs strat√©giques: Alignement IT/M√©tier

## 3. üèóÔ∏è OBJECTIFS COBIT 2019 RECOMMAND√âS
### Domaine EDM (√âvaluer, Diriger, Surveiller)
- EDM01: Assurer la d√©finition du cadre de gouvernance (Priorit√©: √âlev√©e)
- EDM02: Assurer la r√©alisation des b√©n√©fices (Priorit√©: Moyenne)

### Domaine APO (Aligner, Planifier, Organiser)
- APO01: G√©rer le cadre de gestion IT (Priorit√©: √âlev√©e)
- APO02: G√©rer la strat√©gie (Priorit√©: Critique)

## 4. üìä √âVALUATION DE MATURIT√â
- Niveau actuel moyen: 2.5/5
- Niveau cible recommand√©: 4/5
- √âcart √† combler: 1.5 points

## 5. üí° RECOMMANDATIONS STRAT√âGIQUES
### Court terme (0-6 mois)
- D√©finir les r√¥les et responsabilit√©s IT
- Mettre en place des politiques de base

### Moyen terme (6-18 mois)
- Impl√©menter les processus COBIT prioritaires
- Former les √©quipes

### Long terme (18+ mois)
- Optimiser et automatiser les processus
- Am√©lioration continue

## 6. üìà ANALYSE ROI
- Investissement estim√©: 150,000‚Ç¨
- B√©n√©fices annuels attendus: 225,000‚Ç¨
- ROI estim√©: 150%
- Temps de retour: 0.7 ans

## 7. üõ£Ô∏è FEUILLE DE ROUTE
### Phase 1: Fondations (0-6 mois)
- Audit des processus existants
- D√©finition du cadre de gouvernance

### Phase 2: Impl√©mentation (6-18 mois)
- D√©ploiement des processus COBIT
- Formation et accompagnement

### Phase 3: Optimisation (18+ mois)
- Mesure de performance
- Am√©lioration continue

## 8. üìã CONCLUSION
Ce rapport identifie les axes d'am√©lioration prioritaires pour renforcer la gouvernance IT selon le r√©f√©rentiel COBIT 2019. La mise en ≈ìuvre des recommandations permettra d'am√©liorer significativement la maturit√© des processus IT.
        """

llm = MockLLM()

# Dictionnaires de mots-cl√©s sp√©cifiques √† la gouvernance IT
MOTS_CLES_GOUVERNANCE = {
    "processus_cobit": [
        "APO", "BAI", "DSS", "MEA", "EDM",
        "gouvernance", "gestion", "strat√©gie", "architecture",
        "innovation", "portefeuille", "budget", "ressources humaines",
        "relations", "accords de service", "fournisseurs", "qualit√©",
        "risques", "s√©curit√©", "donn√©es", "actifs", "configuration",
        "changement", "acceptation", "d√©ploiement", "disponibilit√©",
        "capacit√©", "continuit√©", "s√©curit√© informatique", "contr√¥les",
        "incidents", "probl√®mes", "demandes", "performance", "conformit√©",
        "assurance", "audit interne", "gouvernance d'entreprise"
    ],
    "domaines_focus": [
        "alignement strat√©gique", "cr√©ation de valeur", "gestion des risques",
        "gestion des ressources", "mesure de performance", "optimisation",
        "transformation digitale", "innovation", "agilit√©", "r√©silience"
    ],
    "objectifs_gouvernance": [
        "EDM01", "EDM02", "EDM03", "EDM04", "EDM05",
        "APO01", "APO02", "APO03", "APO04", "APO05", "APO06", "APO07",
        "APO08", "APO09", "APO10", "APO11", "APO12", "APO13", "APO14",
        "BAI01", "BAI02", "BAI03", "BAI04", "BAI05", "BAI06", "BAI07",
        "BAI08", "BAI09", "BAI10", "BAI11", "DSS01", "DSS02", "DSS03",
        "DSS04", "DSS05", "DSS06", "MEA01", "MEA02", "MEA03", "MEA04"
    ],
    "niveaux_maturite": [
        "inexistant", "initial", "r√©p√©table", "d√©fini", "g√©r√©", "optimis√©",
        "niveau 0", "niveau 1", "niveau 2", "niveau 3", "niveau 4", "niveau 5"
    ],
    "indicateurs_performance": [
        "KPI", "KGI", "m√©triques", "tableau de bord", "reporting",
        "indicateurs cl√©s", "mesures", "benchmarking", "ROI", "TCO"
    ]
}

def extraire_mots_cles_gouvernance(texte: str) -> Dict[str, List[str]]:
    """Extrait les mots-cl√©s sp√©cifiques √† la gouvernance IT du texte."""
    texte_lower = texte.lower()
    mots_cles_trouves = {}

    for categorie, mots_cles in MOTS_CLES_GOUVERNANCE.items():
        mots_trouves = []
        for mot_cle in mots_cles:
            if mot_cle.lower() in texte_lower:
                # Compter les occurrences
                occurrences = len(re.findall(r'\b' + re.escape(mot_cle.lower()) + r'\b', texte_lower))
                if occurrences > 0:
                    mots_trouves.append(f"{mot_cle} ({occurrences}x)")
        mots_cles_trouves[categorie] = mots_trouves

    return mots_cles_trouves

def analyser_besoins_client(texte: str) -> Dict[str, any]:
    """Analyse les besoins sp√©cifiques du client dans le document."""
    # Tokenisation et nettoyage
    try:
        stop_words = set(stopwords.words('french') + stopwords.words('english'))
    except:
        stop_words = set()

    phrases = sent_tokenize(texte)
    mots = word_tokenize(texte.lower())
    mots_filtres = [mot for mot in mots if mot.isalnum() and mot not in stop_words and len(mot) > 3]

    # Analyse de fr√©quence
    freq_mots = Counter(mots_filtres)
    mots_frequents = freq_mots.most_common(20)

    # Recherche de phrases contenant des besoins
    phrases_besoins = []
    mots_cles_besoins = ['besoin', 'exigence', 'requis', 'n√©cessaire', 'objectif', 'but', 'am√©liorer', 'optimiser','am√©lioration','risque','incident','iso27001']

    for phrase in phrases:
        if any(mot in phrase.lower() for mot in mots_cles_besoins):
            phrases_besoins.append(phrase.strip())

    return {
        'mots_frequents': mots_frequents,
        'phrases_besoins': phrases_besoins[:10],  # Top 10 phrases
        'nombre_phrases': len(phrases),
        'nombre_mots': len(mots_filtres)
    }

def lire_pdf(path: str) -> Tuple[str, Dict]:
    """Lit un PDF et extrait le texte avec m√©tadonn√©es."""
    if not FITZ_AVAILABLE:
        return "Erreur: PyMuPDF non disponible pour lire les fichiers PDF", {
            'erreur': 'PyMuPDF non install√©',
            'type_fichier': 'PDF'
        }

    try:
        text = ""
        metadata = {}

        with fitz.open(path) as doc:
            metadata = {
                'nombre_pages': doc.page_count,
                'titre': doc.metadata.get('title', 'Non sp√©cifi√©'),
                'auteur': doc.metadata.get('author', 'Non sp√©cifi√©'),
                'creation_date': doc.metadata.get('creationDate', 'Non sp√©cifi√©'),
                'type_fichier': 'PDF'
            }

            for page_num, page in enumerate(doc):
                text += f"\n--- Page {page_num + 1} ---\n"
                text += page.get_text()

        return text, metadata
    except Exception as e:
        return f"Erreur lors de la lecture du PDF: {str(e)}", {
            'erreur': str(e),
            'type_fichier': 'PDF'
        }

def lire_excel(path: str) -> Tuple[str, Dict]:
    """Lit un fichier Excel et extrait les donn√©es avec m√©tadonn√©es."""
    try:
        # Lire toutes les feuilles
        excel_file = pd.ExcelFile(path)
        sheets_data = {}
        text_complet = ""

        for sheet_name in excel_file.sheet_names:
            df = pd.read_excel(path, sheet_name=sheet_name)
            sheets_data[sheet_name] = {
                'lignes': len(df),
                'colonnes': len(df.columns),
                'colonnes_noms': list(df.columns)
            }

            text_complet += f"\n--- Feuille: {sheet_name} ---\n"
            text_complet += df.to_string(index=False)
            text_complet += "\n"

        metadata = {
            'nombre_feuilles': len(excel_file.sheet_names),
            'feuilles': sheets_data,
            'noms_feuilles': excel_file.sheet_names
        }

        return text_complet, metadata

    except Exception as e:
        return f"Erreur lors de la lecture du fichier Excel: {str(e)}", {}

def analyser_maturite_cobit(mots_cles: Dict, contenu: str) -> Dict:
    """Analyse le niveau de maturit√© bas√© sur les mots-cl√©s trouv√©s."""
    analyse_maturite = {}

    # Analyse par domaine COBIT
    for domaine_code, domaine_info in OBJECTIFS_COBIT_2019.items():
        score_domaine = 0
        objectifs_applicables = []

        for obj_code, obj_info in domaine_info["objectifs"].items():
            # V√©rifier si l'objectif est mentionn√© ou pertinent
            score_objectif = 0

            # Recherche de mots-cl√©s sp√©cifiques √† l'objectif
            nom_lower = obj_info["nom"].lower()
            desc_lower = obj_info["description"].lower()

            for mot_cle in nom_lower.split() + desc_lower.split():
                if len(mot_cle) > 4 and mot_cle in contenu.lower():
                    score_objectif += 1

            # √âvaluation bas√©e sur les mots-cl√©s de gouvernance trouv√©s
            for categorie, mots_trouves in mots_cles.items():
                if mots_trouves:
                    score_objectif += len(mots_trouves) * 0.1

            if score_objectif > 0:
                niveau_estime = min(5, max(1, int(score_objectif / 2)))
                objectifs_applicables.append({
                    "code": obj_code,
                    "nom": obj_info["nom"],
                    "niveau_actuel": niveau_estime,
                    "niveau_cible": min(5, niveau_estime + 2),
                    "priorite": "√âlev√©e" if niveau_estime < 3 else "Moyenne"
                })
                score_domaine += niveau_estime

        if objectifs_applicables:
            analyse_maturite[domaine_code] = {
                "nom": domaine_info["nom"],
                "score_moyen": round(score_domaine / len(objectifs_applicables), 1),
                "objectifs": objectifs_applicables
            }

    return analyse_maturite

def generer_recommandations_strategiques(analyse_maturite: Dict, mots_cles: Dict) -> Dict:
    """G√©n√®re des recommandations strat√©giques bas√©es sur l'analyse."""
    recommandations = {
        "court_terme": [],
        "moyen_terme": [],
        "long_terme": []
    }

    # Analyser les domaines de focus
    for focus_code, focus_info in DOMAINES_FOCUS.items():
        score_focus = 0
        objectifs_lies = focus_info["objectifs_lies"]

        for domaine_code, domaine_data in analyse_maturite.items():
            for objectif in domaine_data["objectifs"]:
                if objectif["code"] in objectifs_lies:
                    score_focus += objectif["niveau_actuel"]

        if score_focus > 0:
            score_moyen = score_focus / len(objectifs_lies)

            if score_moyen < 2:
                recommandations["court_terme"].append({
                    "domaine": focus_info["nom"],
                    "action": f"Mise en place urgente des processus de base pour {focus_info['description'].lower()}",
                    "priorite": "Critique",
                    "duree": "0-6 mois"
                })
            elif score_moyen < 3:
                recommandations["moyen_terme"].append({
                    "domaine": focus_info["nom"],
                    "action": f"Am√©lioration et standardisation des processus de {focus_info['description'].lower()}",
                    "priorite": "√âlev√©e",
                    "duree": "6-18 mois"
                })
            else:
                recommandations["long_terme"].append({
                    "domaine": focus_info["nom"],
                    "action": f"Optimisation et automatisation des processus de {focus_info['description'].lower()}",
                    "priorite": "Moyenne",
                    "duree": "18+ mois"
                })

    return recommandations

def calculer_roi_estime(analyse_maturite: Dict) -> Dict:
    """Calcule le ROI estim√© des am√©liorations."""
    roi_data = {
        "investissement_estime": 0,
        "benefices_annuels": 0,
        "roi_pourcentage": 0,
        "temps_retour": 0
    }

    # Calcul bas√© sur le nombre d'objectifs √† am√©liorer
    total_objectifs = sum(len(domaine["objectifs"]) for domaine in analyse_maturite.values())

    if total_objectifs > 0:
        # Estimation bas√©e sur des moyennes du march√©
        roi_data["investissement_estime"] = total_objectifs * 50000  # 50k‚Ç¨ par objectif
        roi_data["benefices_annuels"] = total_objectifs * 75000     # 75k‚Ç¨ de b√©n√©fices par an

        if roi_data["investissement_estime"] > 0:
            roi_data["roi_pourcentage"] = round(
                (roi_data["benefices_annuels"] / roi_data["investissement_estime"]) * 100, 1
            )
            roi_data["temps_retour"] = round(
                roi_data["investissement_estime"] / roi_data["benefices_annuels"], 1
            )

    return roi_data

def generer_rapport_detaille(contenu: str, metadata: Dict, mots_cles: Dict, analyse_besoins: Dict) -> str:
    """G√©n√®re un rapport d√©taill√© d'audit de gouvernance IT."""

    date_rapport = datetime.now().strftime("%d/%m/%Y √† %H:%M")

    # Analyses avanc√©es
    analyse_maturite = analyser_maturite_cobit(mots_cles, contenu)
    recommandations = generer_recommandations_strategiques(analyse_maturite, mots_cles)
    roi_data = calculer_roi_estime(analyse_maturite)

    # Construction du prompt enrichi avec analyses
    prompt = f"""
Tu es un expert en gouvernance IT et audit COBIT 2019. Utilise les analyses suivantes pour produire un rapport d'audit professionnel et d√©taill√©.

=== M√âTADONN√âES DU DOCUMENT ===
{json.dumps(metadata, indent=2, ensure_ascii=False)}

=== ANALYSE DE MATURIT√â COBIT 2019 ===
{json.dumps(analyse_maturite, indent=2, ensure_ascii=False)}

=== RECOMMANDATIONS STRAT√âGIQUES ===
{json.dumps(recommandations, indent=2, ensure_ascii=False)}

=== ANALYSE ROI ===
{json.dumps(roi_data, indent=2, ensure_ascii=False)}

=== MOTS-CL√âS GOUVERNANCE IT IDENTIFI√âS ===
{json.dumps(mots_cles, indent=2, ensure_ascii=False)}

=== ANALYSE DES BESOINS CLIENT ===
Phrases cl√©s identifi√©es: {analyse_besoins.get('phrases_besoins', [])}
Mots les plus fr√©quents: {[mot for mot, _ in analyse_besoins.get('mots_frequents', [])[:10]]}

=== EXTRAIT DU CONTENU ANALYS√â ===
{contenu[:3000]}...

=== INSTRUCTIONS POUR LE RAPPORT ===
Utilise TOUTES les analyses fournies ci-dessus pour produire un rapport d'audit de gouvernance IT professionnel et d√©taill√© selon cette structure :

üè¢ **RAPPORT D'AUDIT GOUVERNANCE IT - COBIT 2019**
üìÖ Date du rapport: {date_rapport}
ü§ñ G√©n√©r√© par: Agent IA d'Audit Gouvernance IT

## 1. üìã SYNTH√àSE EX√âCUTIVE
- R√©sum√© des principaux enjeux identifi√©s dans le document
- Score de maturit√© global calcul√© (utilise les donn√©es d'analyse de maturit√©)
- Top 3 des priorit√©s d'action bas√©es sur les recommandations
- Impact business estim√©

## 2. üéØ ANALYSE DES BESOINS CLIENT
- Besoins m√©tier identifi√©s (utilise les phrases cl√©s extraites)
- D√©fis technologiques mentionn√©s
- Objectifs strat√©giques exprim√©s
- Mots-cl√©s les plus fr√©quents et leur signification

## 3. üèóÔ∏è OBJECTIFS COBIT 2019 APPLICABLES
Pour chaque domaine identifi√© dans l'analyse de maturit√©:
- Liste des objectifs COBIT sp√©cifiques avec codes (EDM01, APO02, etc.)
- Niveau de priorit√© bas√© sur l'analyse (Critique/√âlev√©/Moyen/Faible)
- Justification d√©taill√©e pour chaque objectif
- Lien avec les besoins client identifi√©s

## 4. üìä √âVALUATION DE MATURIT√â D√âTAILL√âE
Pour chaque processus dans l'analyse de maturit√©:
- Niveau actuel estim√© (0-5) avec justification
- Niveau cible recommand√©
- √âcart √† combler et effort requis
- Description du niveau de maturit√© selon COBIT

## 5. üîç ANALYSE DES RISQUES ET OPPORTUNIT√âS
- Risques IT identifi√©s dans le document
- Risques li√©s aux niveaux de maturit√© faibles
- Impact potentiel (Critique/√âlev√©/Moyen/Faible)
- Opportunit√©s d'am√©lioration
- Mesures de mitigation recommand√©es

## 6. üí° RECOMMANDATIONS STRAT√âGIQUES PAR HORIZON
### Court terme (0-6 mois) - Actions Critiques
{[rec for rec in recommandations.get('court_terme', [])]}

### Moyen terme (6-18 mois) - Am√©liorations Structurelles
{[rec for rec in recommandations.get('moyen_terme', [])]}

### Long terme (18+ mois) - Optimisation Continue
{[rec for rec in recommandations.get('long_terme', [])]}

## 7. üìà ANALYSE ROI ET B√âN√âFICES ATTENDUS
- Investissement estim√©: {roi_data.get('investissement_estime', 0):,}‚Ç¨
- B√©n√©fices annuels attendus: {roi_data.get('benefices_annuels', 0):,}‚Ç¨
- ROI estim√©: {roi_data.get('roi_pourcentage', 0)}%
- Temps de retour sur investissement: {roi_data.get('temps_retour', 0)} ans
- Gains en efficacit√© op√©rationnelle
- R√©duction des risques quantifi√©e

## 8. üõ£Ô∏è FEUILLE DE ROUTE D'IMPL√âMENTATION
### Phase 1 (0-6 mois): Fondations
- Actions prioritaires identifi√©es
- Ressources n√©cessaires
- Livrables attendus

### Phase 2 (6-18 mois): D√©veloppement
- Initiatives de moyen terme
- Jalons importants
- Indicateurs de progression

### Phase 3 (18+ mois): Optimisation
- Vision long terme
- Am√©lioration continue
- Innovation et transformation

## 9. üìä INDICATEURS DE PERFORMANCE (KPI/KGI)
- KGI (Indicateurs d'Objectifs) recommand√©s
- KPI (Indicateurs de Performance) par processus
- Tableaux de bord sugg√©r√©s
- Fr√©quence de mesure

## 10. üìã PLAN D'ACTION OP√âRATIONNEL
Pour chaque recommandation critique:
- Action concr√®te d√©taill√©e
- Responsable sugg√©r√© (r√¥le)
- √âch√©ance pr√©cise
- Budget estim√©
- Pr√©requis et d√©pendances
- Crit√®res de succ√®s

## 11. üéØ CONCLUSION ET PROCHAINES √âTAPES
- Synth√®se des b√©n√©fices attendus
- Facteurs cl√©s de succ√®s
- Risques d'impl√©mentation
- Recommandations pour le d√©marrage

IMPORTANT:
- Utilise EXCLUSIVEMENT les donn√©es d'analyse fournies
- Sois pr√©cis avec les codes COBIT (EDM01, APO02, etc.)
- Justifie chaque recommandation par les √©l√©ments du document
- Fournis des chiffres concrets quand disponibles
- Adapte le niveau de d√©tail aux enjeux identifi√©s
"""

    return llm(prompt)

def traiter_document(path: str) -> str:
    """Traite un document et g√©n√®re un rapport d'audit complet."""
    try:
        # D√©terminer le type de fichier et extraire le contenu
        if path.lower().endswith('.pdf'):
            contenu, metadata = lire_pdf(path)
            type_fichier = "PDF"
        elif path.lower().endswith(('.xlsx', '.xls')):
            contenu, metadata = lire_excel(path)
            type_fichier = "Excel"
        else:
            return "‚ùå Format de fichier non support√©. Formats accept√©s: PDF, Excel (.xlsx, .xls)"

        # Ajouter des informations sur le type de fichier
        metadata['type_fichier'] = type_fichier
        metadata['taille_contenu'] = len(contenu)
        metadata['date_traitement'] = datetime.now().isoformat()

        # Extraire les mots-cl√©s sp√©cifiques √† la gouvernance
        mots_cles = extraire_mots_cles_gouvernance(contenu)

        # Analyser les besoins du client
        analyse_besoins = analyser_besoins_client(contenu)

        # G√©n√©rer le rapport d√©taill√©
        rapport = generer_rapport_detaille(contenu, metadata, mots_cles, analyse_besoins)

        return rapport

    except Exception as e:
        return f"‚ùå Erreur lors du traitement du document: {str(e)}\n\nVeuillez v√©rifier que le fichier n'est pas corrompu et r√©essayer."
